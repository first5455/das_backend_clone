# Generated by Django 3.2.6 on 2021-09-08 07:51

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='KubernetesCreateOutput',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deploymentName', models.CharField(max_length=500)),
                ('serviceName', models.CharField(max_length=500)),
                ('nameSpace', models.CharField(max_length=500)),
                ('name', models.CharField(max_length=500)),
                ('port', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='KubernetesDeployment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('namespace', models.CharField(max_length=500)),
                ('image', models.CharField(max_length=500)),
                ('readyReplicas', models.CharField(max_length=500)),
                ('availableReplicas', models.CharField(max_length=500)),
                ('uptodateReplicas', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='KubernetesHorizontal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('namespace', models.CharField(max_length=500)),
                ('deploymentTarget', models.CharField(max_length=500)),
                ('targetcpu', models.CharField(max_length=500)),
                ('currentcpu', models.CharField(max_length=500)),
                ('minpod', models.CharField(max_length=500)),
                ('maxpod', models.CharField(max_length=500)),
                ('currentpod', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='KubernetesNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.CharField(max_length=500)),
                ('name', models.CharField(max_length=500)),
                ('role', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='KubernetesPod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clusterip', models.CharField(max_length=500)),
                ('podname', models.CharField(max_length=500)),
                ('namespace', models.CharField(max_length=500)),
                ('status', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='KubernetesService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('servicename', models.CharField(max_length=500)),
                ('namespace', models.CharField(max_length=500)),
                ('port', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Port',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port', models.IntegerField(unique=True)),
                ('appName', models.CharField(max_length=254)),
                ('namespace', models.CharField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
                ('email', models.EmailField(max_length=500, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('namespace', models.CharField(max_length=63, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
